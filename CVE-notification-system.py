import 
from dotenv import load_dotenv
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import Flask, render_template, request
from threading import Thread
import datetime
import json
import time

#API Key
load_dotenv()

api_key = os.getenv('API_KEY')
database_url = os.getenv('DATABASE_URL')

print(f"API KEY: {api_key}")
print(f"Database URL: {database_url}")

# Configuration
BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
CVE_CHANGE = "https://services.nvd.nist.gov/rest/json/cvehistory/2.0"
SMTP_SERVER = "smtp.example.com"
SMTP_PORT = 587
EMAIL_USER = "rbrown@uncommonsoluions.com"
EMAIL_PASSWORD = "your_email_password"
TEAMS_WEBHOOK_URL = "https://your_teams_webhook_url_here"

# Flask App Setup
app = Flask(__name__)
cve_notifications = []  # Store recent CVEs for the board

# Fetch CVEs from NVD API
def fetch_cves(keyword, days=1):
    search_params = {
        "keyword": keyword,
        "pubStartDate": (datetime.datetime.now() - datetime.timedelta(days=days)).isoformat() + "Z",
        "pubEndDate": datetime.datetime.now().isoformat() + "Z",
    }
    headers = {"apiKey": api_key} if api_key else {}
    response = requests.get(BASE_URL, params=search_params, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return data.get("vulnerabilities", [])
    else:
        print(f"Error fetching CVEs: {response.status_code}")
        return []

# Notify via Email
def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg["From"] = EMAIL_USER
        msg["To"] = EMAIL_USER
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            server.sendmail(EMAIL_USER, EMAIL_USER, msg.as_string())
        print("Email notification sent.")
    except Exception as e:
        print(f"Error sending email: {e}")

# Notify via Teams
def send_teams_notification(message):
    try:
        response = requests.post(TEAMS_WEBHOOK_URL, json={"text": message})
        if response.status_code == 200:
            print("Teams notification sent.")
        else:
            print(f"Error sending Teams notification: {response.status_code}")
    except Exception as e:
        print(f"Error sending Teams notification: {e}")

# Background Worker for Notifications
def notification_worker(keyword, interval=3600):
    global cve_notifications
    while True:
        print("Checking for new CVEs...")
        cves = fetch_cves(keyword)
        for cve in cves:
            cve_id = cve["cve"]["id"]
            description = cve["cve"]["descriptions"][0]["value"]
            published_date = cve["cve"]["published"]
            cve_link = f"https://nvd.nist.gov/vuln/detail/{cve_id}"

            # Prevent duplicate notifications
            if cve_id not in [item["id"] for item in cve_notifications]:
                cve_notifications.insert(0, {"id": cve_id, "description": description, "date": published_date, "link": cve_link})
                if len(cve_notifications) > 100:  # Limit stored CVEs
                    cve_notifications.pop()

                # Send Notifications
                subject = f"New CVE Detected: {cve_id}"
                body = f"Description: {description}\nPublished Date: {published_date}\nMore Info: {cve_link}"
                send_email(subject, body)
                send_teams_notification(body)

        time.sleep(interval)  # Wait before checking again

# Flask Routes
@app.route("/")
def index():
    return render_template("index.html", cves=cve_notifications)

@app.route("/add_keyword", methods=["POST"])
def add_keyword():
    keyword = request.form.get("keyword")
    if keyword:
        Thread(target=notification_worker, args=(keyword,)).start()
    return index()

if __name__ == "__main__":
    # Start the notification worker for a default keyword
    Thread(target=notification_worker, args=("MikroTik",)).start()
    app.run(debug=True)
